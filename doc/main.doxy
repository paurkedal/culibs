/*!\mainpage Garbage Collected C Libraries

\section main_synopsis Synopsis

\htmlonly
<a style='display: float; float: right' href='http://gplv3.fsf.org/'>
<img style='border: none' src='gplv3-127x51.png'></a>
\endhtmlonly

This is a reference manual for the culibs, which is a set of libraries of
basic (strings, containers) as well as more special-purpose (expressions)
types and functions.  A distinguishing feature is that all memory returned
to the client is allocated with the
<a href="http://www.hpl.hp.com/personal/Hans_Boehm/gc/">Boehm-Demers-Weiser
Conservative Garbage Collector</a>.

The libraries are separated into modules, which are the basis for organising
the documentation.  So, a good starting point is the “Modules” section.  You
can completely ignore the “Data Structures” section, since all structure
members are to be considered internal.  Also, all identifiers which starts
with <tt>cu*P_</tt> are internal.

These libraries are licensed under the GNU General Public License, version 3 or
later.

\subsection main_why_gc Why Garbage Collection?

General considerations on garbage collection for C are covered in
<a href="http://www.hpl.hp.com/personal/Hans_Boehm/gc/issues.html">Advantages
and Disadvantages of Conservative Garbage Collection</a>.
Of particular interest here is it's application to the expression library.
Expressions are big trees of small objects, and this is precisely the case
where garbage collection excels.
In addition it allows the use of hash-consing, which is used extensively in the
expression library.

\section main_top_modules Status of Top-Level Modules

Most of these libraries is still to be considered a <b>preview</b>, since as they
are subject to API changes.  Roughly the status of various components are

<table class="normal">
  <tr><th>component</th>	<th>status</th></tr>
  <tr><td>\ref cu_mod</td>	<td>beta</td></tr>
  <tr><td>\ref cucon_mod</td>	<td>beta</td></tr>
  <tr><td>\ref cuos_mod</td>	<td>beta</td></tr>
  <tr><td>\ref cuoo_mod</td>	<td>unstable API</td></tr>
  <tr><td>\ref cugra_mod</td>	<td>unstable API</td></tr>
  <tr><td>\ref cudyn_mod</td>	<td>deprecated, may be removed</td></tr>
  <tr><td>\ref cuex_mod</td>	<td>unstable API</td></tr>
  <tr><td>\ref cuflow_mod</td>	<td>experimental</td></tr>
</table>

\section main_deps Requirements

The author has only tested these libraries on Linux systems.
The aim is to support modern POSIX systems.
In addition to the OS libraries, you need

<table class="normal">
  <tr>
    <th>libary (components)</th>
    <th>internal deps</th>
    <th>external deps</th>
  </tr>
  <tr>
    <td><tt>libcubase.la</tt> (cu, cucon, cuoo)</td>
    <td></td>
    <td>libatomic_ops<br>BDW-GC<br>optional: libunwind</td>
  </tr>
  <tr>
    <td><tt>libcuos.la</tt> (cuos)</td>
    <td><tt>libcubase.la</tt></td>
    <td></td>
  <tr>
    <td><tt>libcuflow.la</tt> (cuflow)</td>
    <td><tt>libcubase.la</tt></td>
    <td><tt>librt.so</tt> (system lib)</td>
  </tr>
  <tr>
    <td><tt>libcugra.la</tt> (cugra)</td>
    <td><tt>libcubase.la</tt></td>
    <td>optional: BuDDY</td>
  </tr>
  <tr>
    <td><tt>libcuex.la</tt> (cuex, cudyn)</td>
    <td><tt>libcubase.la</tt><br><tt>libcugra.la</tt></td>
    <td>libffi</td>
  </tr>
</table>

More information about the external libraries:

<ul>
  <li>
<a href="http://www.hpl.hp.com/research/linux/atomic_ops/index.php4">
libatomic_ops</a> comes bundled with gc-7.0, but if you
install it in advance, gc will use the installed one.</li>
  <li>
The <a href="http://www.hpl.hp.com/personal/Hans_Boehm/gc/">
Boehm-Demers-Weiser Conservative Garbage Collector</a>:
If you intend to do any serious work with expressions (\ref cuex_mod "cuex"
and \ref cudyn_mod "cudyn" modules), consider recompiling the collector with
the disclaim-patch mentioned under \ref main_download.
This will significantly speed up hash-consing, but it is not strictly
required.</li>
  <li><tt>libffi</tt> is part of
<a href="http://gcc.gnu.org/">GCC</a>, but it is not installed by
default.  Check if your distribution has it, it will save you some work.
Also, there is an <a href="http://sources.redhat.com/libffi/">
older separate version</a> which works on <tt>x86</tt>, but not on
<tt>x86_64</tt>.
  </li>
</ul>


\section main_compiling Compiling and Linking Against the Libraries

The libraries ship with a pkg-config specification for each module.
So, if you use Autoconf, add

<pre>
PKG_CHECK_MODULES(CULIBS, \e modules)
</pre>

where \e modules is a list of the modules you want to use, and
refer to <tt>\$(CULIBS_CFLAGS)</tt> and <tt>\$(CULIBS_LIBS)</tt> in
your makefiles.

If you don't use Autoconf, you can obtain the flags to pass to the
compiler with the \c pkg-config command, e.g.

<pre>
gcc `pkg-config --cflags cu cucon cuos` -c test.c
gcc `pkg-config --libs cu cucon cuos` -o test test.o
</pre>


\section main_obtain Getting the Libraries

\subsection main_download Download

In the <a href="/download/">download directory</a> you will find

<ul>
  <li>Source tarballs named culibs-*.tar.bz2</li>
  <li>Patches to the garbage collector named bdwgc-rn-*.patch.  This is not
    required, but recommended if you need good performance in the
    expression library.
    <ul>
      <li>gc-<i>DATE</i>-disclaim-<i>PATCHVERSION</i>.patch applies to a
        CVS snapshot of the given date</li>
      <li>gc-<i>VERSION</i>-disclaim-<i>PATCHVERSION</i>.patch applies to
        GC releases.</li>
      <li><a href="bdwgc-rn.html">Comment on the patch.</a></li>
    </ul>
    If you don't find a patch that matches the GC version you want to use, 
    try the closest before and after the date.
  </li>
</ul>

\subsection main_installing Build and Install

After installing the above dependencies, unpack the source tarball, and
from the top-level directory, type

<pre>
./configure
make all install
</pre>

If you only want to build the base libraries, replace the first command
with

<pre>
./configure --enable-modules=cu,cucon,cuos
</pre>

This will excuse you from installing the extra requirements of the other
components.
*/

/*!\defgroup cu_mod cu: Common Infrastructure
 * This module provieds basic infrastructure used by the other modules.
 */

/*!\defgroup cucon_mod cucon: Containers
 * This module provides various linear, associative, and some specialised
 * container types.
 */

/*!\defgroup cuoo_mod cuoo: Dynamic Objects and Operations
 * This module defines a unified format of operations for building expression
 * trees, and of dynmaically typed objects.
 * This module also provides hash-consed allocation primitives.
 * Further support for expression trees are provided by \ref cuex_mod.
 */

/*!\defgroup cugra_mod cugra: A Small Graph Library
 * There are many more comprehensive graph libraries available, this is
 * only to support some graph-based algorithm in \ref cuex_mod.
 */

/*!\defgroup cuos_mod cuos: Interface to the Operating System
 */

/*!\defgroup cuflow_mod cuflow: Control Flow */

/*!\defgroup cuex_mod cuex: Expressions
 * Part of <tt>libcuex.la</tt>.
 *
 * \note
 * Some of the APIs are unstable.
 */

/*!\defgroup cudyn_mod cudyn: Dynamic Typing
 * \deprecated
 * The typing infrastructure for aggregates will be obsoleted by the use of
 * expression trees (in cuex).  As a consquence, there will be little left in
 * this namespace.  Therefore, this module may be merged into cuex, implying
 * systematic name changes.
 */
